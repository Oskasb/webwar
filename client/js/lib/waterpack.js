webpackJsonp([21],{0:function(a,b,c){a.exports=c(514)},514:function(a,b,c){if(a.exports={FlatWaterRenderer:c(515),ProjectedGrid:c(516),ProjectedGridWaterRenderer:c(517)},"undefined"!=typeof window)for(var d in a.exports)window.goo[d]=a.exports[d]},515:function(a,b,c){function d(a){a=a||{},this.useRefraction=void 0!==a.useRefraction?a.useRefraction:!0,this.divider=a.divider||2,this.width=-1,this.height=-1,this.waterCamera=new g(45,1,.1,2e3),this.renderList=[],this.waterPlane=new h;var b=new l(q,"WaterMaterial");b.shader.setDefine("REFRACTION",this.useRefraction),b.cullState.enabled=!1;var c=null;if(a.normalsTexture)c=a.normalsTexture,b.setTexture("NORMAL_MAP",c);else if(a.normalsUrl){var d=a.normalsUrl||"../resources/water/waternormals3.png";(new n).loadTexture2D(d).then(function(a){b.setTexture("NORMAL_MAP",a)})}else{var e=new Uint8Array([127,127,255,255]);c=new m(e,null,1,1),b.setTexture("NORMAL_MAP",c)}this.waterMaterial=b,this.skybox=null,this.followCam=!0,this.updateWaterPlaneFromEntity=void 0!==a.updateWaterPlaneFromEntity?this.updateWaterPlaneFromEntity:!0,this.calcVect=new j,this.camReflectDir=new j,this.camReflectUp=new j,this.camReflectLeft=new j,this.camLocation=new j,this.camReflectPos=new j,this.offset=new j,this.clipPlane=new k,this.waterEntity=null,this.depthMaterial=new l(r,"depth")}var e=c(14),f=c(31),g=c(120),h=c(121),i=c(133),j=c(8),k=c(11),l=c(30),m=c(53),n=c(125),o=c(48),p=c(47);d.prototype.updateSize=function(a){var b=Math.floor(a.viewportWidth/this.divider),c=Math.floor(a.viewportHeight/this.divider);(b!==this.width||c!==this.height)&&(this.width=b,this.height=c,this.reflectionTarget&&a._deallocateRenderTarget(this.reflectionTarget),this.reflectionTarget=new i(b,c),this.useRefraction&&(this.refractionTarget&&a._deallocateRenderTarget(this.refractionTarget),this.depthTarget&&a._deallocateRenderTarget(this.depthTarget),this.refractionTarget=new i(b,c),this.depthTarget=new i(b,c)))},d.prototype.process=function(a,b,c,d,e){if(this.waterEntity){this.updateSize(a),b=b.filter(function(a){return a.meshRendererComponent.isReflectable});var f=this.waterPlane;this.waterCamera.copy(d),this.updateWaterPlaneFromEntity&&(f.constant=this.waterEntity.transformComponent.sync().worldTransform.translation.y);var g=d.translation.y>f.constant;if(this.waterEntity.skip=!0,g){this.useRefraction&&(c.process(this.waterCamera,b,this.renderList),this.clipPlane.setDirect(f.normal.x,-f.normal.y,f.normal.z,-f.constant),this.waterCamera.setToObliqueMatrix(this.clipPlane),this.depthMaterial.uniforms.waterHeight=f.constant,a.render(this.renderList,this.waterCamera,e,this.depthTarget,!0,this.depthMaterial),a.render(this.renderList,this.waterCamera,e,this.refractionTarget,!0),this.waterMaterial.setTexture("REFRACTION_MAP",this.refractionTarget),this.waterMaterial.setTexture("DEPTH_MAP",this.depthTarget));var h=this.calcVect,i=this.camReflectDir,j=this.camReflectUp,k=this.camReflectLeft,l=this.camLocation,m=this.camReflectPos;l.set(d.translation);var n=2*f.pseudoDistance(l);if(h.set(f.normal).mulDirect(n,n,n),m.set(l.sub(h)),l.set(d.translation).add(d._direction),n=2*f.pseudoDistance(l),h.set(f.normal).mulDirect(n,n,n),i.set(l.sub(h)).sub(m).normalize(),l.set(d.translation).add(d._up),n=2*f.pseudoDistance(l),h.set(f.normal).mulDirect(n,n,n),j.set(l.sub(h)).sub(m).normalize(),k.set(j).cross(i).normalize(),this.waterCamera.translation.set(m),this.waterCamera._direction.set(i),this.waterCamera._up.set(j),this.waterCamera._left.set(k),this.waterCamera.normalize(),this.waterCamera.update(),this.skybox&&this.followCam){var o=this.skybox.transformComponent.sync().worldTransform;o.translation.set(m),o.update()}}if(this.waterMaterial.shader.uniforms.abovewater=g,c.process(this.waterCamera,b,this.renderList),a.setRenderTarget(this.reflectionTarget),a.clear(),this.skybox)if(this.skybox instanceof Array){this.clipPlane.setDirect(f.normal.x,f.normal.y,f.normal.z,f.constant),this.waterCamera.setToObliqueMatrix(this.clipPlane,10);for(var p=0;p<this.skybox.length;p++)a.render(this.skybox[p],this.waterCamera,e,this.reflectionTarget,!1),this.skybox[p].skip=!0}else a.render(this.skybox,this.waterCamera,e,this.reflectionTarget,!1),this.skybox.skip=!0;if(this.clipPlane.setDirect(f.normal.x,f.normal.y,f.normal.z,f.constant),this.waterCamera.setToObliqueMatrix(this.clipPlane),a.render(this.renderList,this.waterCamera,e,this.reflectionTarget,!1),this.waterEntity.skip=!1,this.skybox)if(this.skybox instanceof Array)for(var p=0;p<this.skybox.length;p++)this.skybox[p].skip=!1;else this.skybox.skip=!1;if(this.waterMaterial.setTexture("REFLECTION_MAP",this.reflectionTarget),g&&this.skybox&&this.followCam){var q=d.translation,o=this.skybox.transformComponent.sync().worldTransform;o.translation.set(q).add(this.offset),o.update(),this.waterCamera._updatePMatrix=!0}}},d.prototype.setSkyBox=function(a){this.skybox=a,a.meshRendererComponent&&(this.skybox.meshRendererComponent.materials[0].depthState.enabled=!1,this.skybox.meshRendererComponent.materials[0].renderQueue=0,this.skybox.meshRendererComponent.cullMode="Never")},d.prototype.setWaterEntity=function(a){this.waterEntity=a,this.waterEntity.meshRendererComponent.materials[0]=this.waterMaterial};var q={defines:{REFRACTION:!1},attributes:{vertexPosition:e.POSITION,vertexNormal:e.NORMAL},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,normalMatrix:f.NORMAL_MATRIX,cameraPosition:f.CAMERA,normalMap:"NORMAL_MAP",reflection:"REFLECTION_MAP",refraction:"REFRACTION_MAP",depthmap:"DEPTH_MAP",vertexTangent:[1,0,0,1],waterColor:[.0625,.0625,.0625],abovewater:!0,fogColor:[1,1,1],sunDirection:[.66,.66,.33],sunColor:[1,1,.5],sunShininess:100,sunSpecPower:4,fogStart:0,fogScale:2e3,timeMultiplier:1,time:f.TIME,distortionMultiplier:.025,fresnelPow:2,normalMultiplier:3,fresnelMultiplier:1,waterScale:5,doFog:!0,resolution:f.RESOLUTION},vshader:["attribute vec3 vertexPosition;","attribute vec3 vertexNormal;","uniform vec4 vertexTangent;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform float waterScale;","varying vec2 texCoord0;","varying vec3 eyeVec;","varying vec4 viewCoords;","varying vec3 worldPos;","void main(void) {","worldPos = (worldMatrix * vec4(vertexPosition, 1.0)).xyz;","texCoord0 = worldPos.xz * waterScale;","vec3 n = normalize(normalMatrix * vec3(vertexNormal.x, vertexNormal.y, -vertexNormal.z));","vec3 t = normalize(normalMatrix * vertexTangent.xyz);","vec3 b = cross(n, t) * vertexTangent.w;","mat3 rotMat = mat3(t, b, n);","vec3 eyeDir = worldPos - cameraPosition;","eyeVec = eyeDir * rotMat;","viewCoords = projectionMatrix * viewMatrix * worldMatrix * vec4(vertexPosition, 1.0);","gl_Position = viewCoords;","}"].join("\n"),fshader:["uniform sampler2D normalMap;","uniform sampler2D reflection;","#ifdef REFRACTION","uniform sampler2D refraction;","uniform sampler2D depthmap;","#endif","uniform vec3 waterColor;","uniform bool abovewater;","uniform vec3 fogColor;","uniform float fogStart;","uniform float fogScale;","uniform float time;","uniform float timeMultiplier;","uniform float distortionMultiplier;","uniform float fresnelPow;","uniform vec3 sunDirection;","uniform vec3 sunColor;","uniform float sunShininess;","uniform float sunSpecPower;","uniform float normalMultiplier;","uniform float fresnelMultiplier;","uniform bool doFog;","uniform vec2 resolution;","varying vec2 texCoord0;","varying vec3 eyeVec;","varying vec4 viewCoords;","varying vec3 worldPos;","vec4 combineTurbulence(in vec2 coords) {","float t = time * timeMultiplier;","vec4 coarse1 = texture2D(normalMap, coords * vec2(0.0012, 0.001) + vec2(0.019 * t, 0.021 * t));","vec4 coarse2 = texture2D(normalMap, coords * vec2(0.001, 0.0011) + vec2(-0.017 * t, 0.016 * t));","vec4 detail1 = texture2D(normalMap, coords * vec2(0.008) + vec2(0.06 * t, 0.03 * t));","vec4 detail2 = texture2D(normalMap, coords * vec2(0.006) + vec2(0.05 * t, -0.04 * t));","return (detail1 * 0.25 + detail2 * 0.25 + coarse1 * 0.75 + coarse2 * 1.0) / 2.25 - 0.48;","}","#ifdef REFRACTION",p.methods.unpackDepth,"#endif","void main(void) {","float fogDist = clamp((viewCoords.z-fogStart)/fogScale,0.0,1.0);","vec2 normCoords = texCoord0;","vec4 noise = combineTurbulence(normCoords);","vec3 normalVector = normalize(noise.xyz * vec3(normalMultiplier, normalMultiplier, 1.0));","vec3 localView = normalize(eyeVec);","float fresnel = dot(normalize(normalVector * vec3(fresnelMultiplier, fresnelMultiplier, 1.0)), localView);","if ( abovewater == false ) {","	fresnel = -fresnel;","}","fresnel *= 1.0 - fogDist;","float fresnelTerm = 1.0 - fresnel;","fresnelTerm = pow(fresnelTerm, fresnelPow);","fresnelTerm = clamp(fresnelTerm, 0.0, 1.0);","fresnelTerm = fresnelTerm * 0.95 + 0.05;","vec2 projCoord = viewCoords.xy / viewCoords.q;","projCoord = (projCoord + 1.0) * 0.5;","projCoord.y -= 1.0 / resolution.y;","#ifdef REFRACTION","float depth = unpackDepth(texture2D(depthmap, projCoord));","vec2 projCoordRefr = projCoord;","projCoordRefr += (normalVector.xy * distortionMultiplier) * smoothstep(0.0, 0.5, depth);","projCoordRefr = clamp(projCoordRefr, 0.001, 0.999);","depth = unpackDepth(texture2D(depthmap, projCoordRefr));","#endif","projCoord += (normalVector.xy * distortionMultiplier);","projCoord = clamp(projCoord, 0.001, 0.999);","if ( abovewater == true ) {","projCoord.x = 1.0 - projCoord.x;","}","vec4 waterColorX = vec4(waterColor, 1.0);","vec4 reflectionColor = texture2D(reflection, projCoord);","if ( abovewater == false ) {","reflectionColor *= vec4(0.8,0.9,1.0,1.0);","vec4 endColor = mix(reflectionColor,waterColorX,fresnelTerm);","gl_FragColor = mix(endColor,waterColorX,fogDist);","}","else {","vec3 sunSpecReflection = normalize(reflect(-sunDirection, normalVector));","float sunSpecDirection = max(0.0, dot(localView, sunSpecReflection));","vec3 specular = pow(sunSpecDirection, sunShininess) * sunSpecPower * sunColor;","vec4 endColor = waterColorX;","#ifdef REFRACTION","vec4 refractionColor = texture2D(refraction, projCoordRefr) * vec4(0.7);","endColor = mix(refractionColor, waterColorX, depth);","#endif","endColor = mix(endColor, reflectionColor, fresnelTerm);","if (doFog) {","gl_FragColor = (vec4(specular, 1.0) + mix(endColor,reflectionColor,fogDist)) * (1.0-fogDist) + vec4(fogColor, 1.0) * fogDist;","} else {","gl_FragColor = vec4(specular, 1.0) + mix(endColor,reflectionColor,fogDist);","}","}","}"].join("\n")},r={processors:[o.animation.processor],defines:{WEIGHTS:!0,JOINTIDS:!0},attributes:{vertexPosition:e.POSITION,vertexJointIDs:e.JOINTIDS,vertexWeights:e.WEIGHTS},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,waterHeight:0,waterDensity:.05},vshader:["attribute vec3 vertexPosition;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec4 worldPosition;",o.animation.prevertex,"void main(void) {","mat4 wMatrix = worldMatrix;",o.animation.vertex,"worldPosition = wMatrix * vec4(vertexPosition, 1.0);","gl_Position = projectionMatrix * viewMatrix * worldPosition;","}"].join("\n"),fshader:["uniform float waterHeight;","uniform float waterDensity;",p.methods.packDepth,"varying vec4 worldPosition;","void main(void)","{","float linearDepth = clamp(pow((waterHeight - worldPosition.y) * waterDensity, 0.25), 0.0, 0.999);","gl_FragColor = packDepth(linearDepth);","}"].join("\n")};a.exports=d},516:function(a,b,c){function d(a,b){this.densityX=void 0!==a?a:20,this.densityY=void 0!==b?b:20,this.projectorCamera=new j(45,1,.1,2e3),this.mainCamera=new j(45,1,.1,2e3),this.freezeProjector=!1,this.upperBound=20,this.origin=new h,this.direction=new h,this.source=new f,this.rangeMatrix=new i,this.intersectBottomLeft=new h,this.intersectTopLeft=new h,this.intersectTopRight=new h,this.intersectBottomRight=new h,this.planeIntersection=new g,this.freezeProjector=!1,this.projectorMinHeight=50,this.intersections=[];for(var c=0;24>c;c++)this.intersections.push(new g);this.connections=[0,3,1,2,0,4,1,5,2,6,3,7,4,7,5,6];var d=this.densityX*this.densityY,k=(this.densityX-1)*(this.densityY-1)*6,l=e.defaultMap([e.POSITION,e.TEXCOORD0]);e.call(this,l,d,k),this.rebuild()}var e=c(14),f=c(19),g=c(8),h=c(11),i=c(33),j=c(120),k=c(9);d.prototype=Object.create(e.prototype),d.prototype.constructor=d,d.prototype.update=function(a){if(0!==a.translation.y){var b=this.upperBound,c=this.mainCamera;if(c){this.freezeProjector||c.copy(a);var d=c.translation;d.y>0&&d.y<b+c.near?c.translation.setDirect(d.x,b+c.near,d.z):d.y<0&&d.y>-b-c.near&&c.translation.setDirect(d.x,-b-c.near,d.z);for(var e=c.calculateFrustumCorners(),f=0,i=new g,j=0;8>j;j++){var l=this.connections[2*j],m=this.connections[2*j+1];(e[l].y>b&&e[m].y<b||e[l].y<b&&e[m].y>b)&&this.getWorldIntersectionSimple(b,e[l],e[m],this.intersections[f++],i),(e[l].y>-b&&e[m].y<-b||e[l].y<-b&&e[m].y>-b)&&this.getWorldIntersectionSimple(-b,e[l],e[m],this.intersections[f++],i)}for(var j=0;8>j;j++)e[j].y<b&&e[j].y>-b&&this.intersections[f++].set(e[j]);if(0===f)return!1;var n=this.projectorCamera;if(n.copy(c),n.translation.y>0&&n._direction.y>0||n.translation.y<0&&n._direction.y<0){n._direction.y=-n._direction.y;var o=new g;o.set(n._direction).cross(n._left).normalize(),n._up.set(o)}var l=this.source,p=this.planeIntersection;l.setDirect(.5,.5),this.getWorldIntersection(0,l,n.getViewProjectionInverseMatrix(),p);var q=n.translation;if(q.y>0&&q.y<2*this.projectorMinHeight){var r=(2*this.projectorMinHeight-q.y)/(2*this.projectorMinHeight);n.translation.setDirect(q.x,2*this.projectorMinHeight-this.projectorMinHeight*r,q.z)}else if(q.y<0&&q.y>2*-this.projectorMinHeight){var r=(2*-this.projectorMinHeight-q.y)/(2*-this.projectorMinHeight);n.translation.setDirect(q.x,2*-this.projectorMinHeight+this.projectorMinHeight*r,q.z)}p.sub(n.translation),p.y=0;var s=p.length();s>Math.abs(n.translation.y)?(p.normalize(),p.scale(Math.abs(n.translation.y))):s<k.EPSILON&&(p.add(n._up),p.y=0,p.normalize(),p.scale(.1)),p.add(n.translation),p.y=0,n.lookAt(p,g.UNIT_Y);for(var t=n.getViewProjectionMatrix(),u=new h,v=this.intersections,j=0;f>j;j++){var w=v[j];u.setDirect(w.x,0,w.z,1),u.applyPost(t),w.setDirect(u.x,u.y,0),w.scale(1/u.w)}for(var x=Number.MAX_VALUE,y=-Number.MAX_VALUE,z=Number.MAX_VALUE,A=-Number.MAX_VALUE,j=0;f>j;j++)v[j].x<x&&(x=v[j].x),v[j].x>y&&(y=v[j].x),v[j].y<z&&(z=v[j].y),v[j].y>A&&(A=v[j].y);var B=this.rangeMatrix;B.setIdentity(),B.e00=y-x,B.e11=A-z,B.e03=x,B.e13=z;var C=n.getViewProjectionInverseMatrix();return B.mul2(C,B),l.setDirect(.5,.5),this.getWorldIntersectionHomogenous(0,l,B,this.intersectBottomLeft),l.setDirect(.5,1),this.getWorldIntersectionHomogenous(0,l,B,this.intersectTopLeft),l.setDirect(1,1),this.getWorldIntersectionHomogenous(0,l,B,this.intersectTopRight),l.setDirect(1,.5),this.getWorldIntersectionHomogenous(0,l,B,this.intersectBottomRight),!0}}},d.prototype.getWorldIntersectionHomogenous=function(a,b,c,d){this.calculateIntersection(a,b,c),d.set(this.origin)},d.prototype.getWorldIntersection=function(a,b,c,d){this.calculateIntersection(a,b,c),d.setDirect(this.origin.x,this.origin.y,this.origin.z).scale(1/this.origin.w)},d.prototype.getWorldIntersectionSimple=function(a,b,c,d,e){var f=d.set(b),g=e.set(c).sub(f),h=(a-f.y)/g.y;return g.scale(h),f.add(g),h>=0&&1>=h},d.prototype.calculateIntersection=function(a,b,c){if(this.origin.setDirect(2*b.x-1,2*b.y-1,-1,1),this.direction.setDirect(2*b.x-1,2*b.y-1,1,1),this.origin.applyPost(c),this.direction.applyPost(c),this.direction.sub(this.origin),Math.abs(this.direction.y)>k.EPSILON){var d=(a-this.origin.y)/this.direction.y;this.direction.scale(d)}else this.direction.normalize(),this.direction.scale(this.mainCamera._frustumFar);this.origin.add(this.direction)},d.prototype.rebuild=function(){for(var a=this.getAttributeBuffer(e.POSITION),b=this.getAttributeBuffer(e.TEXCOORD0),c=this.getIndexBuffer(),d=this.densityX,f=this.densityY,g=0;d>g;g++)for(var h=0;f>h;h++)a[3*(g+h*d)+0]=g,a[3*(g+h*d)+1]=0,a[3*(g+h*d)+2]=h,b[2*(g+h*d)+0]=g/(d-1),b[2*(g+h*d)+1]=h/(f-1);for(var i=0,j=0;d*(f-1)>j;j++)(j%(d*(Math.floor(j/d)+1)-1)!==0||0===j)&&(c[i++]=j,c[i++]=1+d+j,c[i++]=1+j,c[i++]=j,c[i++]=d+j,c[i++]=1+d+j);return this},a.exports=d},517:function(a,b,c){function d(a){this.waterCamera=new g(45,1,.1,2e3),this.renderList=[],this.waterPlane=new h,a=a||{};var b=window.innerWidth/(a.divider||4),c=window.innerHeight/(a.divider||4);this.renderTarget=new i(b,c),b=window.innerWidth/(a.divider||1),c=window.innerHeight/(a.divider||1),this.heightTarget=new i(b,c,{type:"Float"}),this.normalTarget=new i(b,c,{}),this.fullscreenPass=new j(p.normalmap),this.fullscreenPass.material.shader.uniforms.resolution=[b,c];var d=this.waterMaterial=new m(r,"WaterMaterial");d.cullState.enabled=!1;var f=null;if(a.normalsTexture)f=a.normalsTexture;else if(a.normalsUrl){var q=a.normalsUrl||"../resources/water/waternormals3.png";(new o).loadTexture2D(q).then(function(a){d.setTexture("NORMAL_MAP",a)})}else{var t=new Uint8Array([127,127,255,255]);f=new n(t,null,1,1),d.setTexture("NORMAL_MAP",f)}d.setTexture("REFLECTION_MAP",this.renderTarget),d.setTexture("BUMP_MAP",this.heightTarget),d.setTexture("NORMAL_MAP_COARSE",this.normalTarget),this.calcVect=new k,this.camReflectDir=new k,this.camReflectUp=new k,this.camReflectLeft=new k,this.camLocation=new k,this.camReflectPos=new k,this.waterEntity=null,this.clipPlane=new l;var u=this.projData=new e(e.defaultMap([e.POSITION]),4,6);u.getAttributeBuffer(e.POSITION).set([0,0,0,1,0,0,1,1,0,0,1,0]),u.getIndexBuffer().set([1,3,0,2,3,1]);var v=new m(s,"mat");this.projRenderable={meshData:u,materials:[v]}}var e=c(14),f=c(31),g=c(120),h=c(121),i=c(133),j=c(135),k=c(8),l=c(11),m=c(30),n=c(53),o=c(125),p=c(46),q=c(47);d.prototype.updateHelper=function(a,b,c,d){var f=this.projData.getAttributeBuffer(e.POSITION);f[0]=a.x/a.w,f[1]=0,f[2]=a.z/a.w,f[3]=b.x/b.w,f[4]=0,f[5]=b.z/b.w,f[6]=c.x/c.w,f[7]=0,f[8]=c.z/c.w,f[9]=d.x/d.w,f[10]=0,f[11]=d.z/d.w,this.projData.setVertexDataUpdated()},d.prototype.process=function(a,b,c,d,e){if(this.waterEntity){b=b.filter(function(a){return a.meshRendererComponent.isReflectable});var f=this.waterEntity.meshDataComponent.meshData;f.update(d),this.waterMaterial.shader.uniforms.intersectBottomLeft=[f.intersectBottomLeft.x,f.intersectBottomLeft.y,f.intersectBottomLeft.z,f.intersectBottomLeft.w],this.waterMaterial.shader.uniforms.intersectBottomRight=[f.intersectBottomRight.x,f.intersectBottomRight.y,f.intersectBottomRight.z,f.intersectBottomRight.w],this.waterMaterial.shader.uniforms.intersectTopLeft=[f.intersectTopLeft.x,f.intersectTopLeft.y,f.intersectTopLeft.z,f.intersectTopLeft.w],this.waterMaterial.shader.uniforms.intersectTopRight=[f.intersectTopRight.x,f.intersectTopRight.y,f.intersectTopRight.z,f.intersectTopRight.w],this.updateHelper(f.intersectBottomLeft,f.intersectBottomRight,f.intersectTopRight,f.intersectTopLeft),a.render(this.projRenderable,d,e,this.heightTarget,!0),this.fullscreenPass.render(a,this.normalTarget,this.heightTarget,0);var g=this.waterPlane;this.waterCamera.copy(d),g.constant=this.waterEntity.transformComponent.transform.translation.y;var h=d.translation.y>g.constant;if(h){var i=this.calcVect,j=this.camReflectDir,k=this.camReflectUp,l=this.camReflectLeft,m=this.camLocation,n=this.camReflectPos;m.set(d.translation);var o=g.pseudoDistance(m);if(i.set(g.normal).scale(2*o),n.set(m.sub(i)),m.set(d.translation).add(d._direction),o=g.pseudoDistance(m),i.set(g.normal).scale(2*o),j.set(m.sub(i)).sub(n).normalize(),m.set(d.translation).add(d._up),o=g.pseudoDistance(m),i.set(g.normal).scale(2*o),k.set(m.sub(i)).sub(n).normalize(),l.set(k).cross(j).normalize(),this.waterCamera.translation.set(n),this.waterCamera._direction.set(j),this.waterCamera._up.set(k),this.waterCamera._left.set(l),this.waterCamera.normalize(),this.waterCamera.update(),this.skybox){var p=this.skybox.transformComponent.sync().worldTransform;p.translation.set(n),p.update()}}if(this.waterMaterial.shader.uniforms.abovewater=h,this.waterEntity.skip=!0,this.renderList.length=0,c.process(this.waterCamera,b,this.renderList),this.clipPlane.setDirect(g.normal.x,g.normal.y,g.normal.z,g.constant),this.waterCamera.setToObliqueMatrix(this.clipPlane),a.render(this.renderList,this.waterCamera,e,this.renderTarget,!0),this.waterEntity.skip=!1,h&&this.skybox){var q=d.translation,p=this.skybox.transformComponent.sync().worldTransform;p.translation.set(q),p.update()}}},d.prototype.setSkyBox=function(a){this.skybox=a},d.prototype.setWaterEntity=function(a){this.waterEntity=a,this.waterEntity.meshRendererComponent.cullMode="Never",this.waterEntity.meshRendererComponent.materials[0]=this.waterMaterial;var b=this.waterEntity.meshDataComponent.meshData;this.waterMaterial.shader.uniforms.density=[b.densityX,b.densityY]};var r={attributes:{vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,normalMatrix:f.NORMAL_MATRIX,cameraPosition:f.CAMERA,normalMap:"NORMAL_MAP",reflection:"REFLECTION_MAP",bump:"BUMP_MAP",normalMapCoarse:"NORMAL_MAP_COARSE",vertexNormal:[0,-1,0],vertexTangent:[1,0,0,1],waterColor:[15,15,15],abovewater:!0,fogColor:[1,1,1,1],sunDirection:[.66,-.1,.66],coarseStrength:.25,detailStrength:2,fogStart:0,camNear:f.NEAR_PLANE,camFar:f.FAR_PLANE,time:f.TIME,intersectBottomLeft:[0,0,0,0],intersectTopLeft:[0,0,0,0],intersectTopRight:[0,0,0,0],intersectBottomRight:[0,0,0,0],grid:!1,heightMultiplier:50,density:[1,1]},vshader:["attribute vec2 vertexUV0;","uniform vec3 vertexNormal;","uniform vec4 vertexTangent;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform float time;","uniform vec3 sunDirection;","uniform float coarseStrength;","uniform float heightMultiplier;","uniform sampler2D bump;","uniform vec4 intersectBottomLeft;","uniform vec4 intersectTopLeft;","uniform vec4 intersectTopRight;","uniform vec4 intersectBottomRight;","varying vec2 texCoord0;","varying vec2 texCoord1;","varying vec3 eyeVec;","varying vec3 sunDir;","varying vec4 viewCoords;","varying vec3 worldPos;","varying vec3 normal;","void main(void) {","	vec4 pointTop = mix(intersectTopLeft, intersectTopRight, vertexUV0.x);","	vec4 pointBottom = mix(intersectBottomLeft, intersectBottomRight, vertexUV0.x);","	vec4 pointFinal = mix(pointTop, pointBottom, 1.0 - vertexUV0.y);","	pointFinal.xz /= pointFinal.w;","	pointFinal.y = 0.0;","	vec4 screenpos = projectionMatrix * viewMatrix * worldMatrix * vec4(pointFinal.xyz, 1.0);","	vec2 projCoord = screenpos.xy / screenpos.q;","	projCoord = (projCoord + 1.0) * 0.5;","	float height = texture2D(bump, projCoord).x;","	pointFinal.y = height * heightMultiplier;","	texCoord1 = vertexUV0;","	vec4 pos = worldMatrix * vec4(pointFinal.xyz, 1.0);","	worldPos = pos.xyz;","	texCoord0 = worldPos.xz * 2.0;","	vec3 n = normalize(normalMatrix * vertexNormal);","	vec3 t = normalize(normalMatrix * vertexTangent.xyz);","	vec3 b = cross(n, t) * vertexTangent.w;","	mat3 rotMat = mat3(t, b, n);","	vec3 eyeDir = worldPos - cameraPosition;","	eyeVec = eyeDir * rotMat;","	sunDir = sunDirection * rotMat;","	viewCoords = projectionMatrix * viewMatrix * pos;","	gl_Position = viewCoords;","}"].join("\n"),fshader:["uniform sampler2D normalMap;","uniform sampler2D reflection;","uniform sampler2D normalMapCoarse;","uniform vec3 waterColor;","uniform bool abovewater;","uniform vec4 fogColor;","uniform float time;","uniform bool grid;","uniform vec2 density;","uniform float camNear;","uniform float camFar;","uniform float fogStart;","uniform float coarseStrength;","uniform float detailStrength;","varying vec2 texCoord0;","varying vec2 texCoord1;","varying vec3 eyeVec;","varying vec3 sunDir;","varying vec4 viewCoords;","varying vec3 worldPos;","varying vec3 normal;","const vec3 sunColor = vec3(1.0, 0.96, 0.96);","vec4 getNoise(vec2 uv) {","    vec2 uv0 = (uv/123.0)+vec2(time/17.0, time/29.0);","    vec2 uv1 = uv/127.0-vec2(time/-19.0, time/31.0);","    vec2 uv2 = uv/vec2(897.0, 983.0)+vec2(time/51.0, time/47.0);","    vec2 uv3 = uv/vec2(991.0, 877.0)-vec2(time/59.0, time/-63.0);","    vec4 noise = (texture2D(normalMap, uv0)) +","                 (texture2D(normalMap, uv1)) +","                 (texture2D(normalMap, uv2)*3.0) +","                 (texture2D(normalMap, uv3)*3.0);","    return noise/4.0-1.0;","}","void main(void)","{","	vec2 projCoord = viewCoords.xy / viewCoords.q;","	projCoord = (projCoord + 1.0) * 0.5;","	float fs = camFar * fogStart;","	float fogDist = clamp(max(viewCoords.z - fs, 0.0)/(camFar - camNear - fs), 0.0, 1.0);","	vec3 coarseNormal = texture2D(normalMapCoarse, projCoord).xyz * 2.0 - 1.0;","	vec2 normCoords = texCoord0;","	vec4 noise = getNoise(normCoords);","	vec3 normalVector = normalize(noise.xyz * vec3(1.8 * detailStrength, 1.8 * detailStrength, 1.0) + coarseNormal.xyz * vec3(1.8 * coarseStrength, 1.8 * coarseStrength, 1.0));","	vec3 localView = normalize(eyeVec);","	float fresnel = dot(normalize(normalVector*vec3(1.0, 1.0, 1.0)), localView);","	if ( abovewater == false ) {","		fresnel = -fresnel;","	}","	float fresnelTerm = 1.0 - fresnel;","	fresnelTerm *= fresnelTerm;","	fresnelTerm *= fresnelTerm;","	fresnelTerm = fresnelTerm * 0.95 + 0.05;","	if ( abovewater == true ) {","		projCoord.x = 1.0 - projCoord.x;","	}","	projCoord += (normalVector.xy * 0.05);","	projCoord = clamp(projCoord, 0.001, 0.999);"," vec4 waterColorX = vec4(waterColor / 255.0, 1.0);","	vec4 reflectionColor = texture2D(reflection, projCoord);","	if ( abovewater == false ) {","		reflectionColor *= vec4(0.8,0.9,1.0,1.0);","		vec4 endColor = mix(reflectionColor,waterColorX,fresnelTerm);","		gl_FragColor = mix(endColor,waterColorX,fogDist);","	}","	else {","		vec3 diffuse = vec3(0.0);","		vec3 specular = vec3(0.0);","		vec3 sunreflection = normalize(reflect(-sunDir, normalVector));","		float direction = max(0.0, dot(localView, sunreflection));","		specular += pow(direction, 100.0)*sunColor * 2.0;","		diffuse += max(dot(sunDir, normalVector),0.0)*sunColor*0.4;","		vec4 endColor = mix(waterColorX,reflectionColor,fresnelTerm);","		gl_FragColor = mix(vec4(diffuse*0.0 + specular, 1.0) + mix(endColor,reflectionColor,fogDist), fogColor, fogDist);","	}","	if (grid) {","		vec2 low = abs(fract(texCoord1*density)-0.5);","		float dist = 1.0 - step(min(low.x, low.y), 0.05);","		gl_FragColor *= vec4(dist);","	}","}"].join("\n")},s={attributes:{vertexPosition:e.POSITION},uniforms:{viewMatrix:f.VIEW_MATRIX,projectionMatrix:f.PROJECTION_MATRIX,worldMatrix:f.WORLD_MATRIX,time:f.TIME},vshader:["attribute vec3 vertexPosition;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec4 worldPos;","varying vec4 viewCoords;","void main(void) {","	worldPos = worldMatrix * vec4(vertexPosition, 1.0);","	viewCoords = viewMatrix * worldPos;","	gl_Position = projectionMatrix * viewMatrix * worldPos;","}"].join("\n"),fshader:["uniform float time;","varying vec4 worldPos;","varying vec4 viewCoords;",q.noise3d,"vec4 getNoise(sampler2D map, vec2 uv) {","    vec2 uv0 = (uv/223.0)+vec2(time/17.0, time/29.0);","    vec2 uv1 = uv/327.0-vec2(time/-19.0, time/31.0);","    vec2 uv2 = uv/vec2(697.0, 983.0)+vec2(time/151.0, time/147.0);","    vec2 uv3 = uv/vec2(791.0, 877.0)-vec2(time/259.0, time/263.0);","    vec4 noise = (texture2D(map, uv0)*0.0) +","                 (texture2D(map, uv1)*0.0) +","                 (texture2D(map, uv2)*0.0) +","                 (texture2D(map, uv3)*10.0);","    return noise/5.0-1.0;","}","void main(void)","{","	float fogDist = clamp(-viewCoords.z / 1000.0, 0.0, 1.0);","	gl_FragColor = vec4((snoise(vec3(worldPos.xz * 0.008, time * 0.4))+snoise(vec3(worldPos.xz * 0.02, time * 0.8))*0.5)/10.0);","}"].join("\n")};a.exports=d}});