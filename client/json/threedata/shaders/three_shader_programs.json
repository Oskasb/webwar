[
  {
    "SHADER_PROGRAMS": {
      "LOAD_PROGRAM_INDEX":[
        "INSTANCING_PROGRAMS"
      ],
      "SPE_PROGRAMS":{
        "particleVertexMain":[
          "    highp float age = getAge();",
          "    highp float alive = getAlive();",
          "    highp float maxAge = getMaxAge();",
          "    highp float positionInTime = (age / maxAge);",
          "    highp float isAlive = when_gt( alive, 0.0 );",

          "    #ifdef SHOULD_WIGGLE_PARTICLES",
          "        float wiggleAmount = positionInTime * getWiggle();",
          "        float wiggleSin = isAlive * sin( wiggleAmount );",
          "        float wiggleCos = isAlive * cos( wiggleAmount );",
          "    #endif",

          "    vec3 vel = getVelocity( age );",
          "    vec3 accel = getAcceleration( age );",
          "    vec3 force = vec3( 0.0 );",
          "    vec3 pos = vec3( position );",

          "    float drag = 1.0 - (positionInTime * 0.5) * acceleration.w;",

          "    force += vel;",
          "    force *= drag;",
          "    force += accel * age;",
          "    pos += force;",

          "    #ifdef SHOULD_WIGGLE_PARTICLES",
          "        pos.x += wiggleSin;",
          "        pos.y += wiggleCos;",
          "        pos.z += wiggleSin;",
          "    #endif",

          "    #ifdef SHOULD_ROTATE_PARTICLES",
          "        pos = getRotation( pos, positionInTime );",
          "    #endif",

          "    vec4 mvPosition = modelViewMatrix * vec4( pos, 1.0 );",

          "    highp float pointSize = getFloatOverLifetime( positionInTime, size ) * isAlive;",

          "    #ifdef HAS_PERSPECTIVE",
          "        float perspective = scale / length( mvPosition.xyz );",
          "    #else",
          "        float perspective = 1.0;",
          "    #endif",

          "    float pointSizePerspective = pointSize * perspective;",


          "    #ifdef COLORIZE",
          "       vec3 c = isAlive * getColorOverLifetime(",
          "           positionInTime,",
          "           unpackColor( color.x ),",
          "           unpackColor( color.y ),",
          "           unpackColor( color.z ),",
          "           unpackColor( color.w )",
          "       );",
          "    #else",
          "       vec3 c = vec3(1.0);",
          "    #endif",

          "    float o = isAlive * getFloatOverLifetime( positionInTime, opacity );",

          "    vColor = vec4( c, o );",

          "    #ifdef SHOULD_ROTATE_TEXTURE",
          "        vAngle = isAlive * getFloatOverLifetime( positionInTime, angle );",
          "    #endif",
          "    #ifdef SHOULD_CALCULATE_SPRITE",
          "        float framesX = textureAnimation.x;",
          "        float framesY = textureAnimation.y;",
          "        float loopCount = textureAnimation.w;",
          "        float totalFrames = textureAnimation.z;",
          "        float frameNumber = mod( (positionInTime * loopCount) * totalFrames, totalFrames );",

          "        float column = floor(mod( frameNumber, framesX ));",
          "        float row = floor( (frameNumber - column) / framesX );",

          "        float columnNorm = column / framesX;",
          "        float rowNorm = row / framesY;",

          "        vSpriteSheet.x = 1.0 / framesX;",
          "        vSpriteSheet.y = 1.0 / framesY;",
          "        vSpriteSheet.z = columnNorm;",
          "        vSpriteSheet.w = rowNorm;",
          "    #endif",
          "    gl_PointSize = pointSizePerspective;",
          "    gl_Position = projectionMatrix * mvPosition;",
          ""
        ],
        "particleFragmentMain":[
          "    vec3 outgoingLight = vColor.xyz;",
          "    #ifdef ALPHATEST",
          "       if ( vColor.w < float(ALPHATEST) ) discard;",
          "    #endif",
          ""
        ]
      },
      "INSTANCING_PROGRAMS":{

        "vertexPositionMain":[
          "vec3 vPosition = vertexPosition;"
        ],


        "vertexSizeMain":[
          "vPosition = vPosition * size;"
        ],

        "vertexSampledSizeMain":[
          "vPosition = vPosition * sampledSizeFactor;"
        ],

        "vertexSampleTextureData":[


          "progress = time / duration;",

          "offset = offsetSize.xyz;",
          "size =   offsetSize.w;",

          "rowColor =     texelRowSelect.x;",
          "rowDiffusion = texelRowSelect.y;",
          "rowSize  =     texelRowSelect.z;",
          "rowDrag =      texelRowSelect.w;",

          "float sillyRandom1 = sin(progress*1600.0 + time * 6100.2 + duration*progress*910.1);",
          "float sillyRandom2 = sin(progress*2600.0 + time * 49300.1 + duration*progress*510.1);",
          "float sillyRandom3 = sin(progress*2400.0 + time * 5900.1 + duration*progress*210.1);",
          "float sillyRandom4 = sin(progress*1600.0 + time * 39360.1 + duration*progress*810.1);",

          "velocityDiffusion = vec4(sillyRandom1 * diffusors.x, sillyRandom2 * diffusors.x, sillyRandom3 * diffusors.x, sillyRandom4 * diffusors.x);",
          "accelerationDiffusion = vec4(sillyRandom3 * diffusors.y, sillyRandom1*diffusors.y, sillyRandom4*diffusors.y, sillyRandom2*diffusors.y);",

          "velocityFactor = diffusors.z;",

          "pixelSelector.x = progress;",
          "pixelSelector.y = 1.0 - ((rowDiffusion / data_rows) - (0.5 / data_rows));",

          "sampledDataTexel = texture2D(data_texture, pixelSelector);",


          "velocityDiffusion = velocityDiffusion * sampledDataTexel;",
          "accelerationDiffusion = accelerationDiffusion * sampledDataTexel;",


          "pixelSelector.y = 1.0 - ((rowColor / data_rows) - (0.5 / data_rows));",
          "sampledDataTexel = texture2D(data_texture, pixelSelector);",

          "vec4 vertexColor = vec4(sampledDataTexel.r, sampledDataTexel.g, sampledDataTexel.b, sampledDataTexel.a);",


          "pixelSelector.y = 1.0 - ((rowSize / data_rows) - (0.5 / data_rows));",
          "sampledDataTexel = texture2D(data_texture, pixelSelector);",
          "sampledSizeFactor = size * sampledDataTexel.r;"

        ],

        "vertexPredictPositionMain":[
          "float verticalComponent = velocityFactor * velocity.y * time  + 0.5 * acceleration.y * time * time;",
          "float xComponent = velocityFactor*velocity.x * time  + 0.5 * acceleration.x * time * time;",
          "float zComponent = velocityFactor*velocity.z * time  + 0.5 * acceleration.z * time * time;",
          "vec3 velInfluence = vec3(xComponent, verticalComponent, zComponent);",

          "velInfluence = velInfluence+velInfluence * accelerationDiffusion.xyz;",

          "vec3 acceleratedInfluence = velInfluence + velocityDiffusion.xyz;",

          "velocityOffset = offset + acceleratedInfluence;"
        ],


        "vertexPredictRotationMain":[

          "float spinComponent = velocity.w * time  + 0.5 * acceleration.w * time * time;",

          "float rotation = spinComponent;",
          "float c = cos(rotation);",
          "float s = sin(rotation);",
          "mat3 spinMatrix = mat3(c, s, 0.0, -s, c, 0.0, 0.0, 1.0, 0.0);",

          "vec3 spinInfluence = spinMatrix * vPosition;",

          "billboardFacing.xy += spinInfluence.xy;"        ],



        "vertexSpatialMain":[
          "vec3 vcV = cross(orientation.xyz, vPosition);",
          "vPosition = vcV * (2.0 * orientation.w) + (cross(orientation.xyz, vcV) * 2.0 + vPosition);"
        ],


        "vertexBillboardFaceMain":[
          "billboardFacing = projectionMatrix *(modelViewMatrix * vec4(velocityOffset, 1) + vec4(vPosition.xy, 0, 0));"
        ],


        "vertexBillboardFinal":[

          "gl_Position = billboardFacing;"

        ],

        "vertexSpatialFinal":[
          "gl_Position = projectionMatrix * modelViewMatrix * vec4( offset + vPosition, 1.0 );"
        ],

        "vertexUvMain":[
          "vUv = uv;"
        ],

        "fragmentTxColorMain":[


          "gl_FragColor = texture2D(map, vUv);"
        ],

        "fragmentUvMain":[
          "gl_FragColor = texture2D(map, vUv);"
        ],

        "vertexUvTilesMain":[
          "vec2 tileScale = 1.0/tiles;",



          "vec2 tileOffset = vec2(tileindex.x * tileScale.x, (tiles.y-1.0 - tileindex.y) * tileScale.y);",
          "vec2 scaledUv = uv*tileScale;",

          "vUv = scaledUv + tileOffset;"
        ],



        "vertexColorFromAttribColor3Alpha1":[
          "vColor = vec4(vertexColor.x, vertexColor.y, vertexColor.z, vertexAlpha);"
        ],

        "vertexColorFromAttribColor4":[
          "vColor = vec4(vertexColor.x, vertexColor.y, vertexColor.z,  vertexColor.w);"
        ],


        "fragmentUvTilesMain":[
          "gl_FragColor = texture2D( map, vUv);"
        ],

        "fragmentColoredTextureMain":[
          "vec4 txColor = texture2D( map, vUv);"
        ],



        "fragmentBlendTxColorVertexColor":[
          "vec4 finalColor = txColor * vColor;"
        ],



        "fragmentAlphaTest":[
          "if (finalColor.a <= alphaTest) discard;"
        ],


        "fragmentVColorFinal":[
          "gl_FragColor = finalColor;"
        ],

        "particleVertexMain":[
          "vec4 mvPosition = modelViewMatrix * vec4( translate, 1.0 );",
          "vec3 trTime = vec3(translate.x + time, translate.y + time, translate.z + time);",
          "float scale = 1.0 + 0.1 * (sin( trTime.x * 2.1 ) + sin( trTime.y * 3.2 ) + sin( trTime.z * 4.3 ));",
          "vScale = scale;",
          "scale = scale * 2.0 + 2.0;",
          "mvPosition.xyz += position * scale * sizeFactor;",
          "vUv = uv;",
          "gl_Position = projectionMatrix * mvPosition;",
          ""
        ],
        "particleFragmentMain":[
          "vec4 diffuseColor = texture2D( map, vUv );",
          "gl_FragColor = vec4( diffuseColor.xyz * HSLtoRGB(vec3(vScale/5.0, 1.0, 0.5)), diffuseColor.w );",
          "if ( diffuseColor.w < 0.5 ) discard;",
          ""
        ],
        "vertexColor":[
          "vColor = customColor;"
        ],
        "fragmentColor":[
          "gl_FragColor = vec4( color * vColor, 1.0 );",
          "gl_FragColor = gl_FragColor * texture2D( texture, gl_PointCoord );"
        ]
      }
    }
  }
]
